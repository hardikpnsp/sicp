;; 3.5.3 Exploiting the Stream Paradigm

(define (average x y)
  (/ (+ x y) 2))

(define (sqrt-improve guess x)
  (average guess (/ x guess)))

(define (sqrt-stream x)
  (define guesses
    (cons-stream 1.0
                 (stream-map (lambda (guess)
                               (sqrt-improve guess x))
                             guesses)))
  guesses)

(stream-ref (sqrt-stream 2) 2)
;;1.
;;1.5
;;1.4166666666666665
;;1.4142156862745097
;;1.4142135623746899

(define (add-streams s1 s2)
  (stream-map + s1 s2))

(define (scale-stream stream factor)
  (stream-map (lambda (x) (* x factor)) stream))

(define (partial-sums s) 
  (cons-stream (stream-car s) (add-streams (stream-cdr s) (partial-sums s)))) 

(define (pi-summands n)
  (cons-stream (/ 1.0 n)
               (stream-map - (pi-summands (+ n 2)))))

(define pi-stream
  (scale-stream (partial-sums (pi-summands 1)) 4))

(stream-ref pi-stream 100)
;; 3.1514934010709914

;; Euler acceleration

(define (euler-transform s)
  (let ((s0 (stream-ref s 0))           ; Sn-1
        (s1 (stream-ref s 1))           ; Sn
        (s2 (stream-ref s 2)))          ; Sn+1
    (cons-stream (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-cdr s)))))

(stream-ref (euler-transform pi-stream) 7)
;; 3.1412548236077655

(define (make-tableau transform s)
  (cons-stream s
               (make-tableau transform
                             (transform s))))

(define (accelerated-sequence transform s)
  (stream-map stream-car
              (make-tableau transform s)))

(stream-ref (accelerated-sequence euler-transform pi-stream) 3)
;; 3.141599357319005

;; Exercise 3.63

(define (sqrt-stream x)
  (cons-stream 1.0
               (stream-map (lambda (guess)
                             (sqrt-improve guess x))
                           (sqrt-stream x))))

#| 
This is inefficient because each time an entire new stream is created and evaluated
it would be equally inefficient if delay was implemented withoug memoization
|#

;; Exercise 3.64: stream-limit

(define (stream-limit s limit)
  (let ((first (stream-car s))
        (second (stream-car (stream-cdr s))))
    (if (< (abs (- first second)) limit)
        second
        (stream-limit (stream-cdr s) limit))))

(define (sqrt x tolerance)
  (stream-limit (sqrt-stream x) tolerance))

(sqrt 2 0.00001)

;; Exercise 3.65: ln 2

;; 1 - 1/2 + 1/3 - 1/4 ...

(define alternating-int
  (cons-stream 1
               (stream-map (lambda (x) (if (> (- x) 0)
                                           (- (- x 1))
                                           (- (+ x 1))))
                           alternating-int)))

(stream-ref alternating-int 2)

(define log-summands
  (stream-map (lambda (x) (/ 1.0 x)) alternating-int))

(stream-ref log-summands 3)

(define log-stream
  (partial-sums log-summands))

(stream-ref log-stream 9500)
;; close to 9500
;; 0.6931

(stream-ref (euler-transform log-stream) 15)
;; 15
;; 0.6931

(stream-ref (accelerated-sequence euler-transform log-stream) 3)
;; 3
;; 0.6931

;; --------------------------------------------------
;; Infinite streams of pairs

(define (interleave s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
                   (interleave s2 (stream-cdr s1)))))

(define (pairs s t)
  (cons-stream
   (list (stream-car s) (stream-car t))
   (interleave
    (stream-map (lambda (x) (list (stream-car s) x))
                (stream-cdr t))
    (pairs (stream-cdr s) (stream-cdr t)))))

;; Exercise 3.66: (pairs integers integers)

(define (add-stream s1 s2)
  (stream-map + s1 s2))

(define ones (cons-stream 1 ones))

(define integers (cons-stream 1 (add-stream ones integers)))

(define int-pair (pairs integers integers))

(define (display-stream s f e)
  (if (< f e)
      (begin (newline)
             (display (stream-ref s f))
             (display-stream s (+ f 1) e))))

(display-stream int-pair 0 31)
;; (5 5)

#|

(1 1) (1 2) (1 3) (1 4) (1 5) ...
(2 2) (2 3) (2 4) (2 5) ...
(3 3) (3 4) (3 5) ...
(4 4) (4 5) ...
(5 5) ...

198th pair is (1 100)

if there are x paris till we reach (6 6)

x/2 will be starting with 1
x/4 will be starting with 2
x/8 will be starting with 3
x/16 will be starting with 4
x/32 will be starting with 5
x/64 will be starting with 6

(6 6) is the first pair that starts with 6

thus x/64 = 1 -> there are 2^6 = 64 pairs

to reach (100 100) there will be 2^100 pairs :O

|#

(stream-ref int-pair 2046)
;; (11 11)
